import java.util.Arrays;
import java.util.Stack;

class Solution {
	public static void mergeIntervals(Ankit[] arr) {
		Stack<Ankit> stack = new Stack<>();

		Arrays.sort(arr, (o1, o2) -> {
			return o1.start - o2.start;
		});

		stack.push(arr[0]);

		for (int i = 1; i < arr.length; i++) {
			Ankit a = stack.peek();
			if(a.end > arr[i].start) {
				if(a.end < arr[i].end)
					a.end = arr[i].end;
			}
			else
				stack.push(arr[i]);
		}

		while (!stack.isEmpty()) {
			Ankit an = stack.pop();
			System.out.println(an.start + " " + an.end);
		}
	}

	public static void main(String args[]) {
		Ankit arr[] = new Ankit[4];
		arr[0] = new Ankit(6, 8);
		arr[1] = new Ankit(1, 9);
		arr[2] = new Ankit(2, 4);
		arr[3] = new Ankit(4, 7);

		mergeIntervals(arr);
	}
}

class Ankit {
	int start, end;

	Ankit(int start, int end) {
		this.start = start;
		this.end = end;
	}
}
Time complexity = O(nlogn);
space complexity = O(n);

So we can optimized it-----------------------------------------------------------------------------------------------
