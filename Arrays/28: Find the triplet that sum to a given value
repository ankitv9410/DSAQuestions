class Solution {
	static boolean findTriplets(int A[], int n, int sum) {
		boolean found = false;
		for (int i = 0; i < n - 2; i++) {
			for (int j = i + 1; j < n - 1; j++) {
				for (int k = j + 1; k < n; k++) {
					if (A[i] + A[j] + A[k] == sum) {
						found = true;
					}
				}
			}
		}
		return found;
	}
	public static void main(String[] args) {
		int arr[] = { 0, -1, 2, -3, 1 };
		int n = arr.length;
		findTriplets(arr, n, -2);
	}
}                 time O(n^3)  space O(1)
---------------------------------------------------------
class Solution {
	public static boolean find3Numbers(int A[], int n, int sum) {
		boolean found = false;
		for (int i = 0; i < n - 1; i++) {
			HashSet<Integer> s = new HashSet<>();
			for (int j = i + 1; j < n; j++) {
				System.out.println(A[i]+" "+A[j]);
				int x = sum - (A[i] + A[j]);
				System.out.println(x);
				if (s.contains(x)) {
					found = true;
					System.out.println(x+"c");
				}
				else
					s.add(A[j]);
			}
		}
		return found;
	}
	public static void main(String[] args) {
		int[] arr1 = { /*589, 343, 609, 61, 222, 759, 955, 889, 147, 691, 950, 844, 431, 621, 749, 68, 537, 784, 36, 227,
				186, 39, 854, 630, 225, 749, 924, 360, 258, 767, 945, 956, 319, 727, 412, 26, 356, 2, 550, 497, 585,
				516, 965, 343, 76, 914, 143, 197, 949, 73*/
				15, 46, 1, 4 ,10, 8};
		int given = 13;
		System.out.println(find3Numbers(arr1, arr1.length, given));
	}
}                 time O(n^2)  space O(n)
------------------------------------------------------------
import java.util.Arrays;
class Solution {
	public static boolean find3Numbers(int A[], int n, int X) {

		Arrays.sort(A);
		boolean found = false;
		int flag = 0;
		for (int i = 0; i < n - 1; i++) {
			int l = i + 1, r = n - 1;
			while (l < r) {
				if (A[i] + A[l] + A[r] == X) {
					found = true;
					flag = 1;
				} else if (A[i] + A[l] + A[r] < X) {
					l++;
				} else
					r--;
				if (flag == 1)
					break;
			}
			if (flag == 1)
				break;
		}
		return found;
	}
	public static void main(String[] args) {
		int[] arr1 = { 15, 46, 1, 4, 10, 8 };
		int given = 13;
		System.out.println(find3Numbers(arr1, arr1.length, given));
	}
}                 time O(n^2)  space O(1)
