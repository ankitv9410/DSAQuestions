class Solution {
	static String subset(int[] arr1,int []arr2) {
		int count = 0;
		for (int i = 0; i < arr2.length; i++) {
			for (int j = 0; j < arr1.length; j++) {
				if (arr2[i] == arr1[j]) {
					count++;
				}
			}
		}
		if (count == arr2.length)
			return "Yes";
		else
			return "No";
	}
	public static void main(String[] args) {
		int[] arr1 = { 11, 1, 13, 21, 3, 7 };
		int[] arr2 = { 11, 3, 7, 1 };
		System.out.println(subset(arr1,arr2));
	}
}                    time O(n^2)  space O(1)
-----------------------------------------------
import java.util.Arrays;
class Solution {
	static String subset(long[] a1, long[] a2) {
		Arrays.sort(a1);
		Arrays.sort(a2);
		int i = 0, j = 0, count = 0;
		while (i < a2.length) {
			if (a2[i] == a1[j]) {
				count++;
				i++;
				j++;
			} else if (a2[i] < a1[j])
				i++;
			else
				j++;
		}
		if (count == a2.length)
			return "Yes";
		else
			return "No";
	}
	public static void main(String[] args) {
		long[] arr1 = { 11, 1, 13, 21, 3, 7 };
		long[] arr2 = { 11, 3, 7, 1 };
		System.out.println(subset(arr1, arr2));
	}
}                    time O(mlogm+nlogn)  space O(1)
-----------------------------------------------
import java.util.HashSet;
import java.util.Set;
class Solution {
	static String subset(long[] arr1, long[] arr2) {
		Set<Long> set = new HashSet<>();
		for (long i : arr1) {
			set.add(i);
		}
		int count = 0;
		for (long i : arr2) {
			if (set.contains(i))
				count++;
		}
		if (count == arr2.length)
			return "Yes";
		else
			return "No";
	}
	public static void main(String[] args) {
		long[] arr1 = { 11, 1, 13, 21, 3, 7 };
		long[] arr2 = { 11, 3, 7, 1 };
		System.out.println(subset(arr1, arr2));
	}
}                    time O(n)  space O(n)
