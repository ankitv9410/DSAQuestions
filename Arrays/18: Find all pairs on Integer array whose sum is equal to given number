public static void bruteForce(int []arr,int k) {
	int count=0;
	for (int i = 0; i < arr.length; i++) {
		for (int j = i+1; j < arr.length; j++) {
			if(arr[i]+arr[j]==k)
				count++;
		}
	}
	System.out.println(count);
}		time O(n^2)  space O(1)
------------------------------------------------------------
public static void findPairs(int[] arr, int sum) {
	int low, high;
	low = 0;
	high = 1;
	while (low < high) {
		if (arr[low] + arr[high] == sum)
			System.out.println(arr[low] + " " + arr[high]);
		if (high == arr.length - 1) {
			low++;
			high = low;
		}
		if (low == arr.length - 1) {
			break;
		}
		high++;
	}
}		time O(n(logn))  space O(1)
------------------------------------------------------------
static int getPairsCount(int n, int sum) {
	HashMap<Integer, Integer> hmap = new HashMap<>();
	for (int i = 0; i < n; i++) {
		if (!hmap.containsKey(arr[i]))
			hmap.put(arr[i], 0);
		hmap.put(arr[i], hmap.get(arr[i]) + 1);
	}
	int count = 0;
	for (int i = 0; i < n; i++) {
		int j = sum - arr[i];
		if (hmap.get(j) != null)
			count += hmap.get(j);
		if (j == arr[i])
			count--;
	}
	return count / 2;
}	time O(n)  space O(n)
