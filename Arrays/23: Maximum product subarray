class Solution {
	public static void maxSubarray(int []arr) {
		
		int max = 0;
		for (int i = 0; i < arr.length; i++) {
			int mult = 1;
			for (int j = i; j < arr.length; j++) {
				mult *= arr[j]; 
				if(mult > max)
					max = mult;
			}
		}
		System.out.println(max);
	}
	public static void main(String args[]) {
		int []arr = {-2, -40, 0, -2, -3};
		maxSubarray(arr);
	}
}                         time O(n^2) space O(1)
-------------------------------------------------
class Solution {
	public static long maxSubarray(int[] arr) {
		long min, max, res;
		min = max = res = 1;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > 0) {
				max *= arr[i];
				min = Math.min(arr[i] * min, 1);
			} else if (arr[i] == 0)
				min = max = 1;
			else {
				min += max - (max = min);
				min *= arr[i];
				max = Math.max(arr[i] * max, 1);
			}
			res = Math.max(max, res);
		}
		return res;
	}
	public static void main(String args[]) {
		int[] arr = { 6, -3, -10, 0, 2 };
		System.out.println(maxSubarray(arr));
	}
}                         time O(n) space O(1)
