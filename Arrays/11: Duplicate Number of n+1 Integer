static void duplicate(int arr[], int len) {
	System.out.print("Duplicates no are: ");
	for (int i = 0; i < arr.length; i++) {
		for (int j = i+1; j < arr.length; j++) {
			if(arr[i]==arr[j]) {
				System.out.print(arr[i]+" ");
			}
		}
	}
}		time O(n^2)
------------------------------------------------------------
static void duplicate(int arr[], int len) {
	System.out.print("Duplicates no are: ");
	HashMap<Integer,Integer> hmap = new HashMap<>();
	for (int i = 0; i < arr.length; i++) {
		if(hmap.containsKey(arr[i]))
			hmap.put(arr[i], hmap.get(arr[i])+1);
		else
			hmap.put(arr[i], 1);
	}
	for(Map.Entry<Integer, Integer> map : hmap.entrySet()) {
		if(map.getKey()>1) {
			System.out.print(map.getKey()+" ");
		}
	}
}		time O(n) space O(n)
------------------------------------------------------------
class Solution {
	public static void findDup(int[] arr) {
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			int j = Math.abs(arr[i]);
			if(arr[j]>=0)
				arr[j] = -arr[j];
			else
				System.out.println(j);
		}
	}
	public static void main(String args[]) {
		int[] arr = { 0,1, 2, 3, 1,0, 3, 6, 6 };
		findDup(arr);
	}
}
Time complexity O(n)
-----------------------------------------------------
class Solution {
	public static void findDup(int[] arr) {
		int n = arr.length;
		for (int i = 0; i < n; i++) {
			arr[arr[i] % n] = arr[arr[i] % n] + n;
		}
		System.out.println("The repeating Elements");
		for (int i = 0; i < n; i++) {
			if (arr[i] >= n * 2) {
				System.out.print(i + " ");
			}
		}
	}

	public static void main(String args[]) {
		int[] arr = { 0, 1, 2, 3, 1, 0, 3, 6, 6 };
		findDup(arr);
	}
}
