class GFG {
	public static void arrange(int[] arr, int n) {
		int count = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] < 0)
				count++;
		}
		int pos[] = new int[arr.length - count];
		int neg[] = new int[count];
		int i, j, k;
		i = j = k = 0;
		while (i < n) {
			if (arr[i] < 0)
				neg[j++] = arr[i++];
			else
				pos[k++] = arr[i++];
		}
		i = j = k = 0;
		while (j < neg.length && k < pos.length) {
			if (i % 2 == 0)
				arr[i++] = neg[j++];
			else
				arr[i++] = pos[k++];
		}
		while (j < neg.length)
			arr[i++] = neg[j++];
		while (k < pos.length)
			arr[i++] = pos[k++];

		for (int k2 = 0; k2 < arr.length; k2++) {
			System.out.print(arr[k2] + " ");
		}
	}
	public static void main(String[] arg) {

		int[] arr = { -4, 1, -3, -4, -5 };
		arrange(arr, arr.length);
	}
}                         time O(n) space O(n)
----------------------------------------------
class Solution {
	public static void shift(int[] arr, int wIndex, int index) {
		int temp = arr[index];
		for (int i = index; i > wIndex; i--)
			arr[i] = arr[i - 1];
		arr[wIndex] = temp;
	}
	public static int[] rearrange(int[] arr, int n) {

		int wrongIndex = -1;
		for (int index = 0; index < arr.length; index++) {
			if (wrongIndex != -1) {
				if ((wrongIndex % 2 == 0 && arr[index] < 0) || (wrongIndex % 2 == 1 && arr[index] > 0)) {
					shift(arr, wrongIndex, index);
					if (index - wrongIndex >= 2)
						wrongIndex = wrongIndex + 2;
					else
						wrongIndex = -1;
				}
			} else {
				if ((index % 2 == 0 && arr[index] > 0) || (index % 2 == 1 && arr[index] < 0))
					wrongIndex = index;
			}
		}
		return arr;
	}
	public static void main(String[] args) {

		int[] arr = { -4, 1, 2, 6, -3, -4, -5 ,-1,-4,-5,-6,-9,5,8,6,4};
		for (int i = 0; i < arr.length; i++)
			System.out.print(arr[i] + " ");
		System.out.println();
		rearrange(arr, arr.length);
		for (int i = 0; i < arr.length; i++)
			System.out.print(arr[i] + " ");

	}
}					time O(n) space O(1)
