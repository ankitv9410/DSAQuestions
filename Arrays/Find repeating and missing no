1 Method:
Sort the Array
Traverse the Array to find the repeating and missing element
----------------------------------------------------------
2 Method:
class Solution {
	public static void missAndRepeat(int[] arr, int n) {
		int[] arr2 = new int[n+1];

		int i = 0, temp = 0;
		while (i < n) {
			temp = arr[i];
			arr2[temp] += 1;
			i++;
		}
		// Repeating Element
		for (int j=1;j<arr2.length;j++) {
			if(arr2[j]>1) {
				System.out.print(j+" ");
				break;
			}
		}
		// Missing Element
		int flag=0;
		for (int j=1;j<arr2.length;j++) {
			if(arr2[j]==0) {
				System.out.print(j+" ");
				flag=1;
			}
		}
		if(flag==0) {
			System.out.println(n);
		}
	}
	public static void main(String args[]) {
		int[] arr = {1,2,1};
		missAndRepeat(arr, arr.length);
	}
}                   time O(n)  space O(n)
------------------------------------------------
3rd Method
class Solution {
	public static void missAndRepeat(int[] arr, int n) {

		for (int i = 0; i < n; i++) {
            int abs_val = Math.abs(arr[i]);
            System.out.println(abs_val);
            if (arr[abs_val - 1] > 0)
                arr[abs_val - 1] = -arr[abs_val - 1];
            else
                System.out.print(abs_val+" ");// Repeating Element
        }
		for (int i = 0; i < arr.length; i++) {
			if(arr[i]>0) {
				System.out.print(i+1); //missing element
			}
		}
	}
	public static void main(String args[]) {
		int[] arr = {2,2 };
		missAndRepeat(arr, arr.length);
	}
}                   time O(n)  space O(1)
