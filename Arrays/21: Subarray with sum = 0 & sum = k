public static boolean sum(int[] arr, int n) {	
	boolean found = false;
	for (int i = 0; i < arr.length; i++) {
		int sum=0;
		for (int j = i; j < arr.length; j++) {
			System.out.println(arr[j]);
			sum +=arr[j];
			System.out.println(sum);
			if(sum==0) {
				found = true;
				break;
			}
		}
		if(found) break;
	}
	return found;
}                       time O(n^2)    space O(1)
--------------------------------------------------
public static boolean sum(int[] arr, int n) {
	boolean found = false;
	Set<Integer> set = new HashSet<>();
	int sum = 0;
	for (int element : arr) {
		set.add(sum);
		sum += element;
		if (set.contains(sum)) {
			found = true;
			break;
		}
	}
	return found;
}                        time O(n)    space O(n)
----------------------------------------------------
public static boolean sum(int[] arr, int n) {
	boolean found = false;
	Set<Integer> set = new HashSet<>();
	int sum = 0;
	int k = 6;  //-2,-3,-4,10
	for (int element : arr) {
		set.add(sum);
		sum += element;
		if (set.contains(sum-k)) {
			found = true;
			break;
		}
	}
	return found;
}                        time O(n)    space O(n)
