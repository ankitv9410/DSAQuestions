class Solution {
	public static boolean sum(int[] arr, int n) {
		
		boolean found = false;
		for (int i = 0; i < arr.length; i++) {
			int sum=0;
			for (int j = i; j < arr.length; j++) {
				System.out.println(arr[j]);
				sum +=arr[j];
				System.out.println(sum);
				if(sum==0) {
					found = true;
					break;
				}
			}
			if(found) break;
		}
		return found;
	}

	public static void main(String[] args) {

		int[] arr = {9, 4, -7, 2, 3, 7};
		System.out.println(sum(arr, arr.length));
	}
}                        time O(n^2)    space O(1)
--------------------------------------------------
import java.util.HashSet;
import java.util.Set;
class Solution {
	public static boolean sum(int[] arr, int n) {
		boolean found = false;
		Set<Integer> set = new HashSet<>();
		int sum = 0;
		for (int element : arr) {
			set.add(sum);
			sum += element;
			if (set.contains(sum)) {
				found = true;
				break;
			}
		}
		return found;
	}
	public static void main(String[] args) {

		int[] arr = { 9, 4, -7, 2, 3, 7 };
		System.out.println(sum(arr, arr.length));
	}
}                        time O(n)    space O(n)
----------------------------------------------------

import java.util.HashSet;
import java.util.Set;
class Solution {
	public static boolean sum(int[] arr, int n) {
		boolean found = false;
		Set<Integer> set = new HashSet<>();
		int sum = 0;
		int k = 6;  //-2,-3,-4,10
		for (int element : arr) {
			set.add(sum);
			sum += element;
			if (set.contains(sum-k)) {
				found = true;
				break;
			}
		}
		return found;
	}
	public static void main(String[] args) {

		int[] arr = { 9, 4, -7, 2, 3, 7 };
		System.out.println(sum(arr, arr.length));
	}
}                        time O(n)    space O(n)
