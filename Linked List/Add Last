class Solution {
	static class Node {
		int data;
		Node next;
	}

	static class LinkedList {
		Node head;
		Node tail;
		int size;

		public void addLast(int val) {
			Node temp = new Node();
			temp.data = val;
			temp.next = null;

			if (size == 0) {
				head = tail = temp;
			} else {
				tail.next = temp;
				tail = temp;
			}
			size++;
		}

		public int llSize() {
			return size;
		}

		public int print() {
			Node temp = head;
			while (temp != null) {
				System.out.print(temp.data + " ");
				temp = temp.next;
			}
			return 0;
		}

		public Node removeFirst() {
			head = head.next;
			size--;
			return head;
		}

		public int getFirst() {
			if (size == 0) {
				return -1;
			} else {
				return head.data;
			}
		}

		public int getLast() {
			if (size == 0) {
				return -1;
			} else {
				return tail.data;
			}
		}

		public int getAt(int idx) {
			idx = idx - 1;

			if (size == 0) {
				return -1;
			} else if (idx < 0 || idx >= size) {
				return -1;
			} else {

				Node temp = head;
				for (int i = 0; i < idx; i++) {
					temp = temp.next;
				}
				return temp.data;
			}
		}

		public void addFirst(int add) {
			Node newNode = new Node();
			newNode.data = add;
			newNode.next = head;
			head = newNode;
			if (size == 0) {
				tail = newNode;
			}
			size++;
		}

		public void addAt(int idx, int add) {

			if (idx == 0) {
				addFirst(add);
			} else if (idx == size) {
				addLast(add);
			} else if (idx < 0 || idx > size) {
				System.out.println("Invalid Args");
			} else {
				Node newNode = new Node();
				Node temp = head;
				newNode.data = add;
				for (int i = 0; i < idx - 1; i++) {
					temp = temp.next;
				}
				newNode.next = temp.next;
				temp.next = newNode;
			}
		}

		public void removeLast() {
			Node temp = head;
			for (int i = 0; i < size - 2; i++) {
				temp = temp.next;
			}
			tail = temp;
			tail.next = null;
			size--;
		}

		public void removeAt(int idx) {
			if (idx < 0 || idx >= size) {
				System.out.println("Invalid");
			} else if (idx == 0) {
				removeFirst();
			} else if (idx == size - 1) {
				removeLast();
			} else {
				Node temp = head;
				for (int i = 0; i < idx - 1; i++) {
					temp = temp.next;
				}
				temp.next = temp.next.next;
				size--;
			}
		}

		public void removeNth1(int idx) {
			idx = size - idx;
			if (idx < 0 || idx >= size) {
				System.out.println("Invalid");
			} else if (idx == 0) {
				removeFirst();
			} else if (idx == size - 1) {
				removeLast();
			} else {
				Node temp = head;
				for (int i = 0; i < idx - 1; i++) {
					temp = temp.next;
				}
				temp.next = temp.next.next;
			}
			size--;
		}

		public void removeNth2(int idx) {
			Node fast = head, slow = head;
			for (int i = 0; i < idx; i++) {
				fast = fast.next;
			}
			while (fast != tail) {
				slow = slow.next;
				fast = fast.next;
			}
			slow.next = slow.next.next;
		}
	}

	public static void main(String args[]) {
		LinkedList ll = new LinkedList();
		for (int i = 0; i < 5; i++) {
			ll.addLast(11 + i);
		}
		ll.print();
		System.out.println();
		// ll.removeFirst();
		// System.out.println(ll.getFirst());
		// System.out.println(ll.getLast());
		// System.out.println(ll.getAt(1));
		// ll.addFirst(20);
		// ll.addAt(2, 122);
		// ll.removeLast();
		// ll.removeAt(2);
		ll.print();
	}
}
