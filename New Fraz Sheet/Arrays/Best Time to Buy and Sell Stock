Q)Buy and Sell only One Stock
  1)Brute force -->
 public static int bruteForce(int[] arr) {
	int max,maxProfit;
	max = maxProfit = 0;
	for (int i = 0; i < arr.length; i++) {
		for (int j = i+1; j < arr.length; j++) {
			if (arr[i] < arr[j]) {
				max = arr[j] - arr[i];
			}
			if(max > maxProfit)
				maxProfit = max;
		}
		System.out.println(maxProfit);
	}
	return maxProfit;
}
               Time O(n^2)   space O(1)
-------------------------------------------------------------------------
int[] profit = new int[prices.length];
		int max = 0;
		profit[prices.length - 1] = prices[prices.length - 1];
		for (int i = prices.length - 2; i >= 0; i--) {
			if (prices[i] > profit[i + 1]) {
				profit[i] = prices[i];
			} else
				profit[i] = profit[i + 1];
		}
		for (int i = 0; i < prices.length; i++) {
			if (profit[i] - prices[i] > max)
				max = profit[i] - prices[i];
		}
		return max;
		Time O(n)   space O(n)
-------------------------------------------------------------------------
2)Optimized Solution
public static int bruteForce(int[] arr) {
int min = Integer.MAX_VALUE, maxProfit = Integer.MIN_VALUE;
	for (int i = 0; i < arr.length; i++) {
		if (arr[i] < min) {
			min = arr[i];
		}
		if (arr[i] - min > maxProfit) {
			maxProfit = arr[i] - min;
		}
	}
	System.out.println(maxProfit);
}                 Time O(n)   space O(1)
---------------------------------------------------------------------------
We can buy and sell many times.
public static int bruteForce(int[] A, int n) {
	int bd, sd, profit;
	bd = sd = profit = 0;
	for (int i = 1; i < arr.length; i++) {
		if (arr[i] > arr[i - 1]) {
			sd++;
		} else {
			profit += arr[sd] - arr[bd];
			sd = bd = i;
		}
	}	
}                Time O(n)   space O(1)
